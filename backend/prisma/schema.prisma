generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(cuid())
  email                  String?          @unique
  phoneNumber            String?
  firstName              String?
  lastName               String?
  password               String?
  otp                    String?
  otpExpiration          DateTime?
  isVerified             Boolean          @default(false)
  resetToken             String?
  resetTokenExpiry       DateTime?
  googleId               String?          @unique
  facebookId             String?          @unique
  isBlocked              Boolean          @default(false)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  role                   UserRole         @default(USER)
  isAdmin                Boolean          @default(false)
  isEmployee             Boolean          @default(false)
  followerCount          Int              @default(0)
  followingCount         Int              @default(0)
  admin                  Admin[]
  comments               Comment[]
  dislikes               Dislike[]
  employee               Employee?
  followers              Follower[]
  following              Following[]
  ReceivedFriendRequests FriendRequest[]  @relation("ReceivedFriendRequests")
  SentFriendRequests     FriendRequest[]  @relation("SentFriendRequests")
  likes                  Like[]
  profile                Profile?
  emailVerified          DateTime?        @map("email_verified")
  accounts               Account[]
  sessions               Session[]
  group                  Group[]
  groupAdmins            GroupAdmin[]
  groupMembers           GroupMember[]
  mediaUploads           MediaUpload[]
  textPosts              TextPost[]
  groupChats             GroupChat[]
  voiceCalls             VoiceCall[]
  voiceCallParticipants  VoiceCallParticipant[]
  videoCalls             VideoCall[]
  videoCallParticipants  VideoCallParticipant[]
  programChat            ProgramChat[]
  programParticipant     ProgramParticipant[]
  program                Program[]
  programVideoCall       ProgramVideoCall[]
  programVoiceCall       ProgramVoiceCall[]
  class                  Class[]     
  instructors            Instructor[]
  students               Student[]
  classmediaUploads      ClassMediaUpload[]
  classtextPosts         ClassTextPost[]
  lectureParticipants    LectureParticipant[]
  classChats             ClassChat[]
  classVoiceCalls        ClassVoiceCall[]
  classVideoCalls        ClassVideoCall[]
  classVoiceCallParticipant ClassVoiceCallParticipant[]
  classVideoCallParticipant ClassVideoCallParticipant[]
  lectureVoiceCall       LectureVoiceCall[]
  lectureVideoCall       LectureVideoCall[]
  lectureChat            LectureChat[]
  course                 Course[]
  lecture                Lecture[]
  exclusive              Exclusive[]
  bootcamp               Bootcamp[]
  bootcampClass          BootcampClass[]
  bootcampInstructor     BootcampInstructor[]
  bootcampStudent        BootcampStudent[]
  bootcampClassMediaUpload BootcampClassMediaUpload[]
  bootcampClassTextPost  BootcampClassTextPost[]
  bootcampClassChat      BootcampClassChat[]
  bootcampClassVoiceCall BootcampClassVoiceCall[]
  bootcampClassVoiceCallParticipant BootcampClassVoiceCallParticipant[]
  bootcampClassVideoCall BootcampClassVideoCall[]
  bootcampClassVideoCallParticipant BootcampClassVideoCallParticipant[]
  bootcampLecture        BootcampLecture[]
  bootcampLectureParticipant BootcampLectureParticipant[]
  bootcampLectureVideoCall BootcampLectureVideoCall[]
  bootcampLectureVoiceCall BootcampLectureVoiceCall[]
  bootcampLectureChat    BootcampLectureChat[]
  bootcampCourse         BootcampCourse[]
  academy                Academy[]
  academyClass           AcademyClass[]
  academyInstructor      AcademyInstructor[]
  academyStudent         AcademyStudent[]
  academyClassMediaUpload AcademyClassMediaUpload[]
  academyClassTextPost   AcademyClassTextPost[]
  academyClassChat       AcademyClassChat[]
  academyClassVoiceCall  AcademyClassVoiceCall[]
  academyClassVoiceCallParticipant AcademyClassVoiceCallParticipant [] 
  academyClassVideoCall  AcademyClassVideoCall[]
  academyClassVideoCallParticipant AcademyClassVideoCallParticipant[]
  academyLecture         AcademyLecture[]
  academyLectureParticipant AcademyLectureParticipant[]
  academyLectureVideoCall AcademyLectureVideoCall[]
  academyLectureVoiceCall AcademyLectureVoiceCall[]
  academyLectureChat     AcademyLectureChat[]
  academyCourse          AcademyCourse[]
  academyVideoCall       AcademyVideoCall[]
  academyVideoCallParticipant AcademyVideoCallParticipant[]
  bootcampVideoCall      BootcampVideoCall[]
  bootcampVideoCallParticipant BootcampVideoCallParticipant[]
  voiceCallingParticipant VoiceCallingParticipant[]
  videoCallingParticipant VideoCallingParticipant[]
  voiceCalling           VoiceCalling[]
  videoCalling           VideoCalling[]
  chatting               Chatting[]
  post                   Post[]
  bootcampTextPost       BootcampTextPost[]
  bootcampMediaUpload    BootcampMediaUpload[]
  academyMediaUpload     AcademyMediaUpload[]
  acdemyTextPost         AcdemyTextPost[]
  bootcampFeedback       BootcampFeedback[]
  bootcampContact        BootcampContact[]
  academyFeedback        AcademyFeedback[]
  academyContact         AcademyContact[]
  bootcampClassFeedback  BootcampClassFeedback[]
  bootcampClassContact   BootcampClassContact[]
  academyClassFeedback   AcademyClassFeedback[]
  academyClassContact    AcademyClassContact[]
  classFeedback          ClassFeedback[]
  classContact           ClassContact[]
  courseSection          CourseSection[]
  courseMedia            CourseMedia[]
  bootcampCourseSection  BootcampCourseSection[]
  bootcampCourseVideo    BootcampCourseVideo[]
  academyCourseSection   AcademyCourseSection[]
  academyCourseVideo     AcademyCourseVideo[]
  exclusiveSection       ExclusiveSection[]
  exclusiveVideo         ExclusiveVideo[]
  classAnnouncement      ClassAnnouncement[]
  bootcampAnnouncement   BootcampAnnouncement[]
  academyAnnouncement    AcademyAnnouncement[]
  academyClassAnnouncement AcademyClassAnnouncement[]
  bootcampClassAnnouncement BootcampClassAnnouncement[]
  bootcampHomeText       BootcampHomeText[]
  bootcampPriceText      BootcampPriceText[]
  academyHomeText        AcademyHomeText[]
  academyPriceText       AcademyPriceText[]
  classPriceText         ClassPriceText[]
  subComment             SubComment[]
  likeComment            LikeComment[]
  dislikeComment         DislikeComment[]
  likeSubComment         LikeSubComment[]
  dislikeSubComment      DislikeSubComment[]

  @@index([email])
} 

model Account {
  id                String  @id @default(cuid())
  userId            String     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Post {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String
  type        PostType
  contentUrl  String?
  thumbnailUrl String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  comment     Comment[]
  like        Like[]
  dislike     Dislike[]
}

enum PostType {
  VIDEO
  IMAGE
  TEXT
}

model VideoCalling {
  id          String     @id @default(cuid())
  hostId      String
  startedAt   DateTime
  endedAt     DateTime?
  link        String
  
  host        User       @relation(fields: [hostId], references: [id])
  participants VideoCallingParticipant[]

  // Relations
  @@unique([link])
}

model VoiceCalling {
  id          String     @id @default(cuid())
  hostId      String
  startedAt   DateTime
  endedAt     DateTime?
  link        String

  host        User       @relation(fields: [hostId], references: [id])
  participants VoiceCallingParticipant[]

  // Relations
  @@unique([link])
}

model VideoCallingParticipant {
  id         String      @id @default(cuid())
  videoCallId String
  userId     String

  videoCall  VideoCalling @relation(fields: [videoCallId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@unique([videoCallId, userId])
}

model VoiceCallingParticipant {
  id         String      @id @default(cuid())
  voiceCallId String
  userId     String

  voiceCall  VoiceCalling @relation(fields: [voiceCallId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@unique([voiceCallId, userId])
}

model Chatting {
  id         String   @id @default(cuid())
  userId     String
  content    String
  type       ChatMessageType
  fileUrl    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
}



model Group {
  id            String          @id @default(cuid())
  name          String
  purpose       String
  rules         String
  description   String
  icon          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     String          
  creator       User            @relation(fields: [createdBy], references: [id])
  admins        GroupAdmin[]
  members       GroupMember[]
  mediaUploads  MediaUpload[]
  textPosts     TextPost[]
  chats         GroupChat[]
  voiceCalls    VoiceCall[]
  videoCalls    VideoCall[]
  program       Program[]
}

model GroupAdmin {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  isBlocked Boolean  @default(false)

  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model MediaUpload {
  id           String   @id @default(cuid())
  groupId      String
  userId       String
  title        String
  description  String
  type         MediaType
  contentUrl   String
  thumbnailUrl String?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  group        Group    @relation(fields: [groupId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model TextPost {
  id         String   @id @default(cuid())
  groupId    String
  userId     String
  title      String
  content    String
  imageUrls  String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  group      Group    @relation(fields: [groupId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model GroupChat {
  id         String   @id @default(cuid())
  groupId    String
  userId     String
  content    String
  type       ChatMessageType
  fileUrl    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  group      Group    @relation(fields: [groupId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model VoiceCall {
  id         String     @id @default(cuid())
  groupId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String
  participants VoiceCallParticipant[]

  group      Group      @relation(fields: [groupId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model VoiceCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      VoiceCall @relation(fields: [callId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([callId, userId])
}

model VideoCall {
  id         String     @id @default(cuid())
  groupId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String
  participants VideoCallParticipant[]

  group      Group      @relation(fields: [groupId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model VideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      VideoCall @relation(fields: [callId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([callId, userId])
}

model Program {
  id                String            @id @default(cuid())
  groupId           String
  creatorId         String
  title             String
  type              String
  participantLimit  Int
  startDate         DateTime
  startTime         DateTime
  description       String
  link              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  group             Group             @relation(fields: [groupId], references: [id])
  creator           User              @relation(fields: [creatorId], references: [id])
  participants      ProgramParticipant[]
  videoCalls        ProgramVideoCall[]
  voiceCalls        ProgramVoiceCall[]
  chats             ProgramChat[]
}

model ProgramParticipant {
  id        String   @id @default(cuid())
  programId String
  userId    String
  joinedAt  DateTime @default(now())

  program   Program  @relation(fields: [programId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([programId, userId])
}

model ProgramVideoCall {
  id         String    @id @default(cuid())
  programId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  program    Program   @relation(fields: [programId], references: [id])
  user    User      @relation(fields: [userId], references: [id])
}

model ProgramVoiceCall {
  id         String    @id @default(cuid())
  programId  String
  userId  String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  program    Program   @relation(fields: [programId], references: [id])
  user    User      @relation(fields: [userId], references: [id])
}

model ProgramChat {
  id         String      @id @default(cuid())
  programId  String
  userId     String
  content    String
  type       ChatMessageType
  fileUrl    String?     
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  program    Program     @relation(fields: [programId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
}

model Class {
  id          String          @id @default(cuid())
  name        String
  purpose     String
  rules       String
  description String
  icon        String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   String          
  creator     User            @relation(fields: [createdBy], references: [id])
  instructors Instructor[]
  students    Student[]
  classMediaUploads ClassMediaUpload[]
  ClassTextPosts   ClassTextPost[]
  chats       ClassChat[]
  voiceCalls  ClassVoiceCall[]
  videoCalls  ClassVideoCall[]
  lectures    Lecture[]
  course      Course[]
  exclusive   Exclusive[]
  classFeedback ClassFeedback[]
  classContact ClassContact[]
  classAnnouncement ClassAnnouncement[]
  classPriceText         ClassPriceText[]
}

model ClassPriceText {
  id                   String      @id @default(cuid())
  classId              String
  userId               String
  title                String?
  text                 String?
  leaning1             String?
  leaning2             String?
  leaning3             String?
  leaning4             String?
  leaning5             String?
  leaning6             String?
  leaning7             String?
  leaning8             String?
  leaning9             String?
  leaning10            String?
  leaning11            String?
  leaning12            String?
  leaning13            String?
  leaning14            String?
  leaning15            String?
  leaning16            String?
  leaning17            String?
  leaning18            String?
  leaning19            String?
  leaning20            String?
  leaning21            String?
  leaning22            String?
  leaning23            String?
  leaning24            String?
  leaning25            String?
  leaning26            String?
  leaning27            String?
  leaning28            String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  class                Class    @relation(fields: [classId], references: [id])
  user                 User     @relation(fields: [userId], references: [id])
}

model ClassAnnouncement {
  id        String      @id @default(cuid())
  classId   String
  userId    String
  title     String
  startDate DateTime
  endDate   DateTime
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bootcamp   Class    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}


model ClassFeedback {
  id        String      @id @default(cuid())
  classId   String
  userId    String
  name      String
  reason    String
  statement String
  rating    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academy   Class    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ClassContact {
  id        String      @id @default(cuid())
  classId   String
  userId    String
  name      String
  email     String
  reason    String
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bootcamp   Class    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Instructor {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class     Class    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, classId])
}

model Student {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  isBlocked Boolean  @default(false)

  class     Class    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, classId])
}

model ClassMediaUpload {
  id           String   @id @default(cuid())
  classId      String
  userId       String
  type         MediaType
  contentUrl   String
  thumbnailUrl String?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  class        Class    @relation(fields: [classId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model ClassTextPost {
  id         String   @id @default(cuid())
  classId    String
  userId     String
  content    String
  imageUrls  String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      Class    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model ClassChat {
  id         String   @id @default(cuid())
  classId    String
  userId     String
  content    String
  type       ChatMessageType
  fileUrl    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      Class    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model ClassVoiceCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants ClassVoiceCallParticipant[]

  class      Class      @relation(fields: [classId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model ClassVoiceCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      ClassVoiceCall @relation(fields: [callId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@unique([callId, userId])
}

model ClassVideoCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants ClassVideoCallParticipant[]

  class      Class      @relation(fields: [classId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model ClassVideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      ClassVideoCall @relation(fields: [callId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@unique([callId, userId])
}

model Lecture {
  id          String      @id @default(cuid())
  classId     String
  creatorId   String
  title       String
  type        String
  participantLimit Int
  startDate   DateTime
  startTime   DateTime
  description String
  link        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  class       Class       @relation(fields: [classId], references: [id])
  creator           User              @relation(fields: [creatorId], references: [id])
  participants LectureParticipant[]
  videoCalls  LectureVideoCall[]
  voiceCalls  LectureVoiceCall[]
  chats       LectureChat[]
}

model LectureParticipant {
  id          String   @id @default(cuid())
  lectureId   String
  userId      String
  joinedAt    DateTime @default(now())

  lecture     Lecture  @relation(fields: [lectureId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([lectureId, userId])
}

model LectureVideoCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  lecture    Lecture   @relation(fields: [lectureId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model LectureVoiceCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  lecture    Lecture   @relation(fields: [lectureId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model LectureChat {
  id         String      @id @default(cuid())
  lectureId  String
  userId     String
  content    String
  type       ChatMessageType
  fileUrl    String?     
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  lecture    Lecture     @relation(fields: [lectureId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
}

model Course {
  id          String           @id @default(cuid())
  classId     String
  instructorId String
  title       String
  description String
  thumbnailUrl String
  category    String
  tags        String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  class       Class            @relation(fields: [classId], references: [id])
  instructor  User             @relation(fields: [instructorId], references: [id])
  sections    CourseSection[]
}

model CourseSection {
  id           String        @id @default(cuid())
  courseId     String
  instructorId String
  title        String
  category     String
  description  String
  thumbnailUrl String
  tags         String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  course       Course        @relation(fields: [courseId], references: [id])
  instructor   User             @relation(fields: [instructorId], references: [id])
  media        CourseMedia[]
}

model CourseMedia {
  id        String       @id @default(cuid())
  sectionId String
  instructorId String
  title     String
  type      MediaTypeCourse    // Enum for video, pdf, etc.
  url       String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  instructor  User             @relation(fields: [instructorId], references: [id])
  section   CourseSection @relation(fields: [sectionId], references: [id])
}

model Exclusive {
  id          String           @id @default(cuid())
  classId     String
  instructorId String
  title       String
  description String
  thumbnailUrl String
  category    String
  tags        String[]
  createdAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  class           Class      @relation(fields: [classId], references: [id])
  instructor  User       @relation(fields: [instructorId], references: [id])
  sections    ExclusiveSection[]
}

model ExclusiveSection {
  id            String    @id @default(cuid())
  courseId      String
  title         String
  instructorId  String
  description   String
  thumbnailUrl  String
  category      String
  tags          String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  course    Exclusive   @relation(fields: [courseId], references: [id])
  instructor  User       @relation(fields: [instructorId], references: [id])
  media    ExclusiveVideo[]
}

model ExclusiveVideo {
  id            String   @id @default(cuid())
  sectionId     String
  instructorId String
  title         String
  url           String
  type          MediaTypeCourse  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  instructor  User       @relation(fields: [instructorId], references: [id])
  section   ExclusiveSection @relation(fields: [sectionId], references: [id])
}

model Bootcamp {
  id          String   @id @default(cuid())
  name        String
  purpose     String
  country     String
  language    String
  rules       String
  description String
  icon        String?
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  creator     User     @relation(fields: [creatorId], references: [id])
  classes     BootcampClass[]
  bootcampVideoCall BootcampVideoCall[]
  bootcampTextPost BootcampTextPost[]
  bootcampMediaUpload BootcampMediaUpload[]
  bootcampFeedback BootcampFeedback[]
  bootcampContact BootcampContact[]
  bootcampAnnouncement   BootcampAnnouncement[]
  bootcampText BootcampHomeText[]
  bootcampPriceText BootcampPriceText[]
}

model BootcampHomeText {
  id                     String      @id @default(cuid())
  bootcampId             String
  userId                 String
  homeTitile             String?
  homeDescription        String?
  intructorExperience    String?
  provenExperience       String?
  achievement            String?
  story                  String?
  bootCampLearning       String?
  beginnerLearning       String?
  intermediateLearning   String?
  advanceLearning        String?
  facebook               String?
  linkedIn               String?
  youtube                String?
  email                  String?
  phoneNumber            String?
  bootcampDetailsTitle   String?
  bootcampDetailsText    String?
  priceTitile            String?
  priceText              String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  bootcamp               Bootcamp    @relation(fields: [bootcampId], references: [id])
  user                   User     @relation(fields: [userId], references: [id])
}

model BootcampPriceText {
  id                   String      @id @default(cuid())
  bootcampId           String
  userId               String
  leaning1             String?
  leaning2             String?
  leaning3             String?
  leaning4             String?
  leaning5             String?
  leaning6             String?
  leaning7             String?
  leaning8             String?
  leaning9             String?
  leaning10            String?
  leaning11            String?
  leaning12            String?
  leaning13            String?
  leaning14            String?
  leaning15            String?
  leaning16            String?
  leaning17            String?
  leaning18            String?
  leaning19            String?
  leaning20            String?
  leaning21            String?
  leaning22            String?
  leaning23            String?
  leaning24            String?
  leaning25            String?
  leaning26            String?
  leaning27            String?
  leaning28            String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  bootcamp             Bootcamp    @relation(fields: [bootcampId], references: [id])
  user                 User     @relation(fields: [userId], references: [id])
}


model BootcampAnnouncement {
  id        String      @id @default(cuid())
  bootcampId String
  userId    String
  title     String
  startDate DateTime
  endDate   DateTime
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bootcamp   Bootcamp    @relation(fields: [bootcampId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model BootcampMediaUpload {
  id           String   @id @default(cuid())
  bootcampId      String
  userId       String
  title        String
  description  String
  type         MediaType
  contentUrl   String
  thumbnailUrl String?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  bootcamp   Bootcamp    @relation(fields: [bootcampId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model BootcampTextPost {
  id         String   @id @default(cuid())
  bootcampId String
  userId     String
  title      String
  content    String
  imageUrls  String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  bootcamp   Bootcamp    @relation(fields: [bootcampId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}


model BootcampVideoCall {
  id         String     @id @default(cuid())
  bootcampId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants BootcampVideoCallParticipant[]

  class      Bootcamp      @relation(fields: [bootcampId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampVideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      BootcampVideoCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model BootcampContact {
  id        String      @id @default(cuid())
  bootcampId String
  userId    String
  name      String
  email     String
  reason    String
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bootcamp   Bootcamp    @relation(fields: [bootcampId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model BootcampFeedback {
  id        String    @id @default(cuid())
  bootcampId String
  userId    String
  name      String
  reason    String
  statement String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bootcamp   Bootcamp    @relation(fields: [bootcampId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model BootcampClass {
  id          String          @id @default(cuid())
  name        String
  purpose     String
  rules       String
  description String
  icon        String?
  bootcampId  String          // Add this to associate with Bootcamp
  level       ClassLevel      // Add this to differentiate Beginner, Intermediate, Advanced
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   String          
  creator     User            @relation(fields: [createdBy], references: [id])
  bootcamp    Bootcamp        @relation(fields: [bootcampId], references: [id])  
  instructors BootcampInstructor[]
  students    BootcampStudent[]
  classMediaUploads BootcampClassMediaUpload[]
  ClassTextPosts   BootcampClassTextPost[]
  chats       BootcampClassChat[]
  voiceCalls  BootcampClassVoiceCall[]
  videoCalls  BootcampClassVideoCall[]
  lectures    BootcampLecture[]
  course      BootcampCourse[]
  bootcampClassFeedback       BootcampClassFeedback[]
  bootcampClassContact        BootcampClassContact[]
  bootcampClassAnnouncement BootcampClassAnnouncement[]
  @@index([bootcampId])
  @@index([createdBy])

}

model BootcampClassAnnouncement {
  id        String      @id @default(cuid())
  classId   String
  userId    String
  title     String
  startDate DateTime
  endDate   DateTime
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bootcamp   BootcampClass    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model BootcampClassFeedback {
  id        String      @id @default(cuid())
  classId   String
  level     ClassLevel 
  userId    String
  name      String
  email     String
  reason    String
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academy   BootcampClass    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model BootcampClassContact {
  id        String      @id @default(cuid())
  classId String
  level     ClassLevel 
  userId    String
  name      String
  email     String
  reason    String
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bootcamp   BootcampClass    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model BootcampInstructor {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  level     ClassLevel 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class     BootcampClass    @relation(fields: [classId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
}

model BootcampStudent {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  level     ClassLevel 
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  isBlocked Boolean  @default(false)

  class     BootcampClass    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, classId])
}

model BootcampClassMediaUpload {
  id           String   @id @default(cuid())
  classId      String
  userId       String
  type         MediaType
  contentUrl   String
  thumbnailUrl String?  
  level        ClassLevel 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  class        BootcampClass    @relation(fields: [classId], references: [id],onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampClassTextPost {
  id         String        @id @default(cuid())
  classId    String
  userId     String
  content    String
  imageUrls  String[]
  level      ClassLevel
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  class      BootcampClass @relation(fields: [classId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([classId])
  @@index([userId])
  @@index([createdAt])
  @@index([level, classId])  // Compound index for queries filtering by level and class
}


model BootcampClassChat {
  id         String   @id @default(cuid())
  classId    String
  userId     String
  content    String
  type       ChatMessageType
  fileUrl    String?  
  level      ClassLevel 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      BootcampClass    @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BootcampClassVoiceCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  level      ClassLevel 
  participants BootcampClassVoiceCallParticipant[]

  class      BootcampClass      @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampClassVoiceCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String
  level     ClassLevel 
  call      BootcampClassVoiceCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model BootcampClassVideoCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants BootcampClassVideoCallParticipant[]
  level      ClassLevel  
  class      BootcampClass      @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampClassVideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String
  level     ClassLevel 
  call      BootcampClassVideoCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model BootcampLecture {
  id          String      @id @default(cuid())
  classId     String
  creatorId   String
  title       String
  type        String
  participantLimit Int
  startDate   DateTime
  startTime   DateTime
  description String
  link        String
  level       ClassLevel 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  class       BootcampClass       @relation(fields: [classId], references: [id],onDelete: Cascade)
  creator           User              @relation(fields: [creatorId], references: [id],onDelete: Cascade)
  participants BootcampLectureParticipant[]
  videoCalls  BootcampLectureVideoCall[]
  voiceCalls  BootcampLectureVoiceCall[]
  chats       BootcampLectureChat[]
}

model BootcampLectureParticipant {
  id          String   @id @default(cuid())
  lectureId   String
  userId      String
  level       ClassLevel 
  joinedAt    DateTime @default(now())

  lecture     BootcampLecture  @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([lectureId, userId])
}

model BootcampLectureVideoCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String
  level       ClassLevel 
  lecture    BootcampLecture   @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampLectureVoiceCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String
  level       ClassLevel 
  lecture    BootcampLecture   @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampLectureChat {
  id         String      @id @default(cuid())
  lectureId  String
  userId     String
  content    String
  type       ChatMessageType
  fileUrl    String?   
  level       ClassLevel   
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  lecture    BootcampLecture     @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampCourse {
  id          String           @id @default(cuid())
  classId     String
  instructorId String
  title       String
  description String
  thumbnailUrl String
  category    String
  tags        String[]
  level       ClassLevel 
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  class       BootcampClass     @relation(fields: [classId], references: [id],onDelete: Cascade)
  instructor  User       @relation(fields: [instructorId], references: [id],onDelete: Cascade)
  sections    BootcampCourseSection[]
}

model BootcampCourseSection {
  id           String    @id @default(cuid())
  courseId     String
  instructorId String
  title        String
  category     String
  description  String
  thumbnailUrl String
  tags         String[]
  level        ClassLevel 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  course    BootcampCourse   @relation(fields: [courseId], references: [id],onDelete: Cascade)
  instructor  User       @relation(fields: [instructorId], references: [id],onDelete: Cascade)
  media    BootcampCourseVideo[]
}
model BootcampCourseVideo {
  id        String   @id @default(cuid())
  sectionId String
  instructorId String
  title     String
  url       String
  type      MediaTypeCourse 
  level     ClassLevel 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  instructor  User       @relation(fields: [instructorId], references: [id],onDelete: Cascade)
  section   BootcampCourseSection @relation(fields: [sectionId], references: [id],onDelete: Cascade)
 
  }

enum ClassLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Academy {
  id          String   @id @default(cuid())
  name        String
  purpose     String
  country     String
  language    String
  rules       String
  description String
  icon        String?
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  creator                User     @relation(fields: [creatorId], references: [id])
  classes                AcademyClass[]
  academyVideoCall       AcademyVideoCall[]
  academyMediaUpload     AcademyMediaUpload[]
  acdemyTextPost         AcdemyTextPost[]
  academyFeedback        AcademyFeedback[]
  academyContact         AcademyContact[]
  academyAnnouncement    AcademyAnnouncement[]
  academyHomeText        AcademyHomeText[]
  academyPriceText       AcademyPriceText[]
}

model AcademyHomeText {
  id                     String      @id @default(cuid())
  academyId              String
  userId                 String
  homeTitile             String?
  homeDescription        String?
  intructorExperience    String?
  provenExperience       String?
  achievement            String?
  story                  String?
  academyLearning        String?
  beginnerLearning       String?
  intermediateLearning   String?
  advanceLearning        String?
  facebook               String?
  linkedIn               String?
  youtube                String?
  email                  String?
  phoneNumber            String?
  academyDetailsTitle    String?
  academyDetailsText     String?
  priceTitile            String?
  priceText              String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  academy                Academy    @relation(fields: [academyId], references: [id])
  user                   User     @relation(fields: [userId], references: [id])
}

model AcademyPriceText {
  id                   String      @id @default(cuid())
  academyId            String
  userId               String
  leaning1             String?
  leaning2             String?
  leaning3             String?
  leaning4             String?
  leaning5             String?
  leaning6             String?
  leaning7             String?
  leaning8             String?
  leaning9             String?
  leaning10            String?
  leaning11            String?
  leaning12            String?
  leaning13            String?
  leaning14            String?
  leaning15            String?
  leaning16            String?
  leaning17            String?
  leaning18            String?
  leaning19            String?
  leaning20            String?
  leaning21            String?
  leaning22            String?
  leaning23            String?
  leaning24            String?
  leaning25            String?
  leaning26            String?
  leaning27            String?
  leaning28            String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  academy              Academy    @relation(fields: [academyId], references: [id])
  user                 User     @relation(fields: [userId], references: [id])
}

model AcademyAnnouncement {
  id        String      @id @default(cuid())
  academyId String
  userId    String
  title     String
  startDate DateTime
  endDate   DateTime
  statement String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academy    Academy    @relation(fields: [academyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model AcademyFeedback {
  id        String      @id @default(cuid())
  academyId String
  userId    String
  name      String
  reason    String
  statement String
  rating    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academy   Academy    @relation(fields: [academyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model AcademyContact {
  id        String      @id @default(cuid())
  academyId String
  userId    String
  name      String
  email     String
  reason    String
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academy   Academy    @relation(fields: [academyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}


model AcademyMediaUpload {
  id           String   @id @default(cuid())
  academyId      String
  userId       String
  title        String
  description  String
  type         MediaType
  contentUrl   String
  thumbnailUrl String?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academy      Academy    @relation(fields: [academyId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model AcdemyTextPost {
  id         String   @id @default(cuid())
  academyId    String
  userId     String
  title      String
  content    String
  imageUrls  String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  academy   Academy    @relation(fields: [academyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}


model AcademyVideoCall {
  id         String     @id @default(cuid())
  academyId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants AcademyVideoCallParticipant[]

  class      Academy      @relation(fields: [academyId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyVideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      AcademyVideoCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model AcademyClass {
  id          String          @id @default(cuid())
  name        String
  purpose     String
  rules       String
  description String
  icon        String?
  bootcampId  String          // Add this to associate with Bootcamp
  level       AcademyClassLevel      // Add this to differentiate Beginner, Intermediate, Advanced
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   String          
  creator     User            @relation(fields: [createdBy], references: [id])
  bootcamp    Academy        @relation(fields: [bootcampId], references: [id])  
  instructors AcademyInstructor[]
  students    AcademyStudent[]
  classMediaUploads AcademyClassMediaUpload[]
  ClassTextPosts   AcademyClassTextPost[]
  chats       AcademyClassChat[]
  voiceCalls  AcademyClassVoiceCall[]
  videoCalls  AcademyClassVideoCall[]
  lectures    AcademyLecture[]
  course      AcademyCourse[]
  academyClassFeedback AcademyClassFeedback[]
  academyClassContact AcademyClassContact[]
  academyClassAnnouncement AcademyClassAnnouncement[]

}

model AcademyClassAnnouncement {
  id        String      @id @default(cuid())
  classId   String
  userId    String
  title     String
  startDate DateTime
  endDate   DateTime
  statement String
  level     ClassLevel 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academy    AcademyClass    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model AcademyClassFeedback {
  id        String      @id @default(cuid())
  classId   String
  level     AcademyClassLevel 
  userId    String
  name      String
  email     String
  reason    String
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academy   AcademyClass    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model AcademyClassContact {
  id        String      @id @default(cuid())
  classId   String
  level     AcademyClassLevel  
  userId    String
  name      String
  email     String
  reason    String
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academy   AcademyClass    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}


model AcademyInstructor {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  level     AcademyClassLevel 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class     AcademyClass    @relation(fields: [classId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
}

model AcademyStudent {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  level     AcademyClassLevel 
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  isBlocked Boolean  @default(false)

  class     AcademyClass    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, classId])
}

model AcademyClassMediaUpload {
  id           String   @id @default(cuid())
  classId      String
  userId       String
  level        AcademyClassLevel 
  type         ChatMessageType
  contentUrl   String
  thumbnailUrl String?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  class        AcademyClass    @relation(fields: [classId], references: [id],onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyClassTextPost {
  id         String   @id @default(cuid())
  classId    String
  level      AcademyClassLevel 
  userId     String
  content    String
  imageUrls  String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      AcademyClass    @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyClassChat {
  id         String   @id @default(cuid())
  classId    String
  userId     String
  content    String
  level      AcademyClassLevel
  type       ChatMessageType
  fileUrl    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      AcademyClass    @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AcademyClassVoiceCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  level      AcademyClassLevel
  startedAt  DateTime
  endedAt    DateTime?
  participants AcademyClassVoiceCallParticipant[]

  class      AcademyClass      @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyClassVoiceCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String
  level      AcademyClassLevel
  call      AcademyClassVoiceCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model AcademyClassVideoCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  level      AcademyClassLevel
  startedAt  DateTime
  endedAt    DateTime?
  participants AcademyClassVideoCallParticipant[]

  class      AcademyClass      @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyClassVideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String
  level      AcademyClassLevel
  call      AcademyClassVideoCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model AcademyLecture {
  id          String      @id @default(cuid())
  classId     String
  creatorId   String
  title       String
  type        String
  participantLimit Int
  level       AcademyClassLevel
  startDate   DateTime
  startTime   DateTime
  description String
  link        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  class       AcademyClass       @relation(fields: [classId], references: [id],onDelete: Cascade)
  creator           User              @relation(fields: [creatorId], references: [id],onDelete: Cascade)
  participants AcademyLectureParticipant[]
  videoCalls  AcademyLectureVideoCall[]
  voiceCalls  AcademyLectureVoiceCall[]
  chats       AcademyLectureChat[]
}

model AcademyLectureParticipant {
  id          String   @id @default(cuid())
  lectureId   String
  userId      String
  joinedAt    DateTime @default(now())
  level      AcademyClassLevel
  lecture     AcademyLecture  @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([lectureId, userId])
}

model AcademyLectureVideoCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String
  level      AcademyClassLevel
  lecture    AcademyLecture   @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyLectureVoiceCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String
  level      AcademyClassLevel
  lecture    AcademyLecture   @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyLectureChat {
  id         String      @id @default(cuid())
  lectureId  String
  userId     String
  content    String
  type       ChatMessageType
  fileUrl    String?     
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  level      AcademyClassLevel
  lecture    AcademyLecture     @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyCourse {
  id           String           @id @default(cuid())
  classId      String
  instructorId String
  title        String
  description  String
  thumbnailUrl String
  category     String
  tags         String[]
  level        AcademyClassLevel
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  class        AcademyClass     @relation(fields: [classId], references: [id],onDelete: Cascade)
  instructor   User       @relation(fields: [instructorId], references: [id],onDelete: Cascade)
  sections     AcademyCourseSection[]
}

model AcademyCourseSection {
  id           String    @id @default(cuid())
  courseId     String
  instructorId String
  title        String
  category     String
  description  String
  thumbnailUrl String
  tags         String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  level     AcademyClassLevel
  instructor  User       @relation(fields: [instructorId], references: [id],onDelete: Cascade)
  course    AcademyCourse   @relation(fields: [courseId], references: [id],onDelete: Cascade)
  media     AcademyCourseVideo[]
}

model AcademyCourseVideo {
  id        String   @id @default(cuid())
  sectionId String
  instructorId String
  title     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     AcademyClassLevel
  type      MediaTypeCourse 
  instructor  User       @relation(fields: [instructorId], references: [id],onDelete: Cascade)
  section   AcademyCourseSection @relation(fields: [sectionId], references: [id],onDelete: Cascade)
 }

enum AcademyClassLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Comment {
  id        String      @id @default(cuid())
  userId    String
  postId    String
  content   String
  type      PostType
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subComment SubComment[]
  likeComment LikeComment[]
  dislikeComment DislikeComment[]
  post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model SubComment {
  id        String      @id @default(cuid())
  userId    String
  commentId String
  content   String
  type      PostType
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  LikeSubComment LikeSubComment[]
  DislikeSubComment DislikeSubComment[]
  Comment   Comment           @relation(fields: [commentId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model LikeComment {
  id        String       @id @default(cuid())
  userId    String
  commentId    String
  type      PostType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment     @relation(fields: [commentId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

model DislikeComment {
  id        String      @id @default(cuid())
  userId    String
  commentId    String
  type      PostType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment     @relation(fields: [commentId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

model LikeSubComment {
  id        String       @id @default(cuid())
  userId    String
  subCommentId    String
  type      PostType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  subComment SubComment     @relation(fields: [subCommentId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

model DislikeSubComment {
  id        String      @id @default(cuid())
  userId    String
  subCommentId    String
  type      PostType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  subComment      SubComment     @relation(fields: [subCommentId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

model Profile {
  id        String         @id @default(cuid())
  userId    String        @unique
  photoUrl  String?
  bannerUrl String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  followers Follower[]
  following Following[]
  User      User        @relation(fields: [userId], references: [id])
}

model Contact {
  id        String      @id @default(cuid())
  name      String
  email     String
  reason    String
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        String    @id @default(cuid())
  name      String
  reason    String
  statement String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String       @id @default(cuid())
  userId    String
  postId    String
  type      PostType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

model Dislike {
  id        String      @id @default(cuid())
  userId    String
  postId    String
  type      PostType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

model Follower {
  id               String      @id @default(cuid())
  followerId       String
  followingId      String
  isBlocked        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             User     @relation(fields: [followerId], references: [id])
  FollowingProfile Profile  @relation(fields: [followingId], references: [userId])
}

model Following {
  id               String      @id @default(cuid())
  followerId       String
  followingId      String
  isBlocked        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             User     @relation(fields: [followerId], references: [id])
  FollowingProfile Profile  @relation(fields: [followingId], references: [userId])
}

model FriendRequest {
  id           String              @id @default(cuid())
  senderId     String
  receiverId   String
  status       FriendshipStatus @default(PENDING)
  isBlocked    Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  ReceiverUser User             @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  SenderUser   User             @relation("SentFriendRequests", fields: [senderId], references: [id])
}



model Admin {
  id          String             @id @default(cuid())
  userId      String              @unique
  fullName    String
  email       String   @unique
  country     String
  state       String
  area        String
  address     String?
  password    String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isAdmin     Boolean           @default(false)
  User        User              @relation(fields: [userId], references: [id])
}

model Employee {
  id             String               @id @default(cuid())
  userId         String              @unique
  fullName       String
  email          String   @unique
  country        String
  state          String
  area           String
  address        String?
  password       String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  access         Json
  isEmployee     Boolean           @default(false)
  User           User              @relation(fields: [userId], references: [id])
}

enum MediaTypeCourse {
  VIDEO
  PDF
  QUIZ
  OTHER
}

enum MediaType {
  SHORT_VIDEO
  NORMAL_VIDEO
  IMAGE
  AUDIO
  DOCUMENT
}

enum ChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  RECORDING
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum UserRole {
  ADMIN
  EMPLOYE
  USER
}


