generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(cuid())
  email                  String?          @unique
  phoneNumber            String?
  firstName              String?
  lastName               String?
  password               String?
  otp                    String?
  otpExpiration          DateTime?
  isVerified             Boolean          @default(false)
  resetToken             String?
  resetTokenExpiry       DateTime?
  googleId               String?          @unique
  facebookId             String?          @unique
  isBlocked              Boolean          @default(false)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  role                   UserRole         @default(USER)
  isAdmin                Boolean          @default(false)
  isEmployee             Boolean          @default(false)
  followerCount          Int              @default(0)
  followingCount         Int              @default(0)
  admin                  Admin[]
  comments               Comment[]
  dislikes               Dislike[]
  employee               Employee?
  followers              Follower[]
  following              Following[]
  ReceivedFriendRequests FriendRequest[]  @relation("ReceivedFriendRequests")
  SentFriendRequests     FriendRequest[]  @relation("SentFriendRequests")
  likes                  Like[]
  profile                Profile?
  emailVerified          DateTime?        @map("email_verified")
  accounts               Account[]
  sessions               Session[]
  group                  Group[]
  groupAdmins            GroupAdmin[]
  groupMembers           GroupMember[]
  mediaUploads           MediaUpload[]
  textPosts              TextPost[]
  groupChats             GroupChat[]
  voiceCalls             VoiceCall[]
  voiceCallParticipants  VoiceCallParticipant[]
  videoCalls             VideoCall[]
  videoCallParticipants  VideoCallParticipant[]
  programChat            ProgramChat[]
  programParticipant     ProgramParticipant[]
  program                Program[]
  programVideoCall       ProgramVideoCall[]
  programVoiceCall       ProgramVoiceCall[]
  class                  Class[]     
  instructors            Instructor[]
  students               Student[]
  classmediaUploads      ClassMediaUpload[]
  classtextPosts         ClassTextPost[]
  lectureParticipants    LectureParticipant[]
  courseSections         CourseSection[]
  courseVideos           CourseVideo[]
  classChats             ClassChat[]
  classVoiceCalls        ClassVoiceCall[]
  classVideoCalls        ClassVideoCall[]
  classVoiceCallParticipant ClassVoiceCallParticipant[]
  classVideoCallParticipant ClassVideoCallParticipant[]
  lectureVoiceCall       LectureVoiceCall[]
  lectureVideoCall       LectureVideoCall[]
  lectureChat            LectureChat[]
  course                 Course[]
  lecture                Lecture[]
  exclusive              Exclusive[]
  exclusiveVideo         ExclusiveVideo[]
  exclusiveSection       ExclusiveSection[]
  bootcampCourseSection  BootcampCourseSection[]
  bootcamp               Bootcamp[]
  bootcampClass          BootcampClass[]
  bootcampInstructor     BootcampInstructor[]
  bootcampStudent        BootcampStudent[]
  bootcampClassMediaUpload BootcampClassMediaUpload[]
  bootcampClassTextPost  BootcampClassTextPost[]
  bootcampClassChat      BootcampClassChat[]
  bootcampClassVoiceCall BootcampClassVoiceCall[]
  bootcampClassVoiceCallParticipant BootcampClassVoiceCallParticipant[]
  bootcampClassVideoCall BootcampClassVideoCall[]
  bootcampClassVideoCallParticipant BootcampClassVideoCallParticipant[]
  bootcampLecture        BootcampLecture[]
  bootcampLectureParticipant BootcampLectureParticipant[]
  bootcampLectureVideoCall BootcampLectureVideoCall[]
  bootcampLectureVoiceCall BootcampLectureVoiceCall[]
  bootcampLectureChat    BootcampLectureChat[]
  bootcampCourse         BootcampCourse[]
  bootcampCourseVideo    BootcampCourseVideo[]
  academy                Academy[]
  academyClass           AcademyClass[]
  academyInstructor      AcademyInstructor[]
  academyStudent         AcademyStudent[]
  academyClassMediaUpload AcademyClassMediaUpload[]
  academyClassTextPost   AcademyClassTextPost[]
  academyClassChat       AcademyClassChat[]
  academyClassVoiceCall  AcademyClassVoiceCall[]
  academyClassVoiceCallParticipant AcademyClassVoiceCallParticipant [] 
  academyClassVideoCall  AcademyClassVideoCall[]
  academyClassVideoCallParticipant AcademyClassVideoCallParticipant[]
  academyLecture         AcademyLecture[]
  academyLectureParticipant AcademyLectureParticipant[]
  academyLectureVideoCall AcademyLectureVideoCall[]
  academyLectureVoiceCall AcademyLectureVoiceCall[]
  academyLectureChat     AcademyLectureChat[]
  academyCourse          AcademyCourse[]
  academyCourseSection   AcademyCourseSection[]
  academyCourseVideo     AcademyCourseVideo[]
  academyVideoCall       AcademyVideoCall[]
  academyVideoCallParticipant AcademyVideoCallParticipant[]
  bootcampVideoCall      BootcampVideoCall[]
  bootcampVideoCallParticipant BootcampVideoCallParticipant[]
  voiceCallingParticipant VoiceCallingParticipant[]
  videoCallingParticipant VideoCallingParticipant[]
  voiceCalling           VoiceCalling[]
  videoCalling           VideoCalling[]
  chatting               Chatting[]
  post                   Post[]
  
 
} 

model Account {
  id                String  @id @default(cuid())
  userId            String     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Post {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String
  type        PostType
  contentUrl  String?
  thumbnailUrl String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
}

enum PostType {
  VIDEO
  IMAGE
  TEXT
}


model VideoCalling {
  id          String     @id @default(cuid())
  hostId      String
  startedAt   DateTime
  endedAt     DateTime?
  link        String
  
  host        User       @relation(fields: [hostId], references: [id])
  participants VideoCallingParticipant[]

  // Relations
  @@unique([link])
}

model VoiceCalling {
  id          String     @id @default(cuid())
  hostId      String
  startedAt   DateTime
  endedAt     DateTime?
  link        String

  host        User       @relation(fields: [hostId], references: [id])
  participants VoiceCallingParticipant[]

  // Relations
  @@unique([link])
}

model VideoCallingParticipant {
  id         String      @id @default(cuid())
  videoCallId String
  userId     String

  videoCall  VideoCalling @relation(fields: [videoCallId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@unique([videoCallId, userId])
}

model VoiceCallingParticipant {
  id         String      @id @default(cuid())
  voiceCallId String
  userId     String

  voiceCall  VoiceCalling @relation(fields: [voiceCallId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@unique([voiceCallId, userId])
}

model Chatting {
  id         String   @id @default(cuid())
  userId     String
  content    String
  type       ChatMessageType
  fileUrl    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
}



model Group {
  id            String          @id @default(cuid())
  name          String
  purpose       String
  rules         String
  description   String
  icon          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     String          
  creator       User            @relation(fields: [createdBy], references: [id])
  admins        GroupAdmin[]
  members       GroupMember[]
  mediaUploads  MediaUpload[]
  textPosts     TextPost[]
  chats         GroupChat[]
  voiceCalls    VoiceCall[]
  videoCalls    VideoCall[]
  program       Program[]
}

model GroupAdmin {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  isBlocked Boolean  @default(false)

  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model MediaUpload {
  id           String   @id @default(cuid())
  groupId      String
  userId       String
  title        String
  description  String
  type         GroupMediaType
  contentUrl   String
  thumbnailUrl String?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  group        Group    @relation(fields: [groupId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model TextPost {
  id         String   @id @default(cuid())
  groupId    String
  userId     String
  title      String
  content    String
  imageUrls  String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  group      Group    @relation(fields: [groupId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model GroupChat {
  id         String   @id @default(cuid())
  groupId    String
  userId     String
  content    String
  type       GroupChatMessageType
  fileUrl    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  group      Group    @relation(fields: [groupId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model VoiceCall {
  id         String     @id @default(cuid())
  groupId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants VoiceCallParticipant[]

  group      Group      @relation(fields: [groupId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model VoiceCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      VoiceCall @relation(fields: [callId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([callId, userId])
}

model VideoCall {
  id         String     @id @default(cuid())
  groupId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants VideoCallParticipant[]

  group      Group      @relation(fields: [groupId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model VideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      VideoCall @relation(fields: [callId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([callId, userId])
}

model Program {
  id                String            @id @default(cuid())
  groupId           String
  creatorId         String
  title             String
  type              String
  participantLimit  Int
  startDate         DateTime
  startTime         DateTime
  description       String
  link              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  group             Group             @relation(fields: [groupId], references: [id])
  creator           User              @relation(fields: [creatorId], references: [id])
  participants      ProgramParticipant[]
  videoCalls        ProgramVideoCall[]
  voiceCalls        ProgramVoiceCall[]
  chats             ProgramChat[]
}

model ProgramParticipant {
  id        String   @id @default(cuid())
  programId String
  userId    String
  joinedAt  DateTime @default(now())

  program   Program  @relation(fields: [programId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([programId, userId])
}

model ProgramVideoCall {
  id         String    @id @default(cuid())
  programId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  program    Program   @relation(fields: [programId], references: [id])
  user    User      @relation(fields: [userId], references: [id])
}

model ProgramVoiceCall {
  id         String    @id @default(cuid())
  programId  String
  userId  String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  program    Program   @relation(fields: [programId], references: [id])
  user    User      @relation(fields: [userId], references: [id])
}

model ProgramChat {
  id         String      @id @default(cuid())
  programId  String
  userId     String
  content    String
  type       ProgramChatMessageType
  fileUrl    String?     
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  program    Program     @relation(fields: [programId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
}

model Class {
  id          String          @id @default(cuid())
  name        String
  purpose     String
  rules       String
  description String
  icon        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   String          
  creator     User            @relation(fields: [createdBy], references: [id])
  instructors Instructor[]
  students    Student[]
  classMediaUploads ClassMediaUpload[]
  ClassTextPosts   ClassTextPost[]
  chats       ClassChat[]
  voiceCalls  ClassVoiceCall[]
  videoCalls  ClassVideoCall[]
  lectures    Lecture[]
  course      Course[]
  exclusive   Exclusive[]
}

model Instructor {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class     Class    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, classId])
}

model Student {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  isBlocked Boolean  @default(false)

  class     Class    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, classId])
}

model ClassMediaUpload {
  id           String   @id @default(cuid())
  classId      String
  userId       String
  type         ClassMediaType
  contentUrl   String
  thumbnailUrl String?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  class        Class    @relation(fields: [classId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model ClassTextPost {
  id         String   @id @default(cuid())
  classId    String
  userId     String
  content    String
  imageUrls  String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      Class    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model ClassChat {
  id         String   @id @default(cuid())
  classId    String
  userId     String
  content    String
  type       ClassChatMessageType
  fileUrl    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      Class    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model ClassVoiceCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants ClassVoiceCallParticipant[]

  class      Class      @relation(fields: [classId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model ClassVoiceCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      ClassVoiceCall @relation(fields: [callId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@unique([callId, userId])
}

model ClassVideoCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants ClassVideoCallParticipant[]

  class      Class      @relation(fields: [classId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model ClassVideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      ClassVideoCall @relation(fields: [callId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@unique([callId, userId])
}

model Lecture {
  id          String      @id @default(cuid())
  classId     String
  creatorId   String
  title       String
  type        String
  participantLimit Int
  startDate   DateTime
  startTime   DateTime
  description String
  link        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  class       Class       @relation(fields: [classId], references: [id])
  creator           User              @relation(fields: [creatorId], references: [id])
  participants LectureParticipant[]
  videoCalls  LectureVideoCall[]
  voiceCalls  LectureVoiceCall[]
  chats       LectureChat[]
}

model LectureParticipant {
  id          String   @id @default(cuid())
  lectureId   String
  userId      String
  joinedAt    DateTime @default(now())

  lecture     Lecture  @relation(fields: [lectureId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([lectureId, userId])
}

model LectureVideoCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  lecture    Lecture   @relation(fields: [lectureId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model LectureVoiceCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  lecture    Lecture   @relation(fields: [lectureId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model LectureChat {
  id         String      @id @default(cuid())
  lectureId  String
  userId     String
  content    String
  type       LectureChatMessageType
  fileUrl    String?     
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  lecture    Lecture     @relation(fields: [lectureId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
}

model Course {
  id          String     @id @default(cuid())
  classId     String
  instructorId String
  title       String
  description String
  thumbnailUrl String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  class       Class      @relation(fields: [classId], references: [id])
  instructor  User       @relation(fields: [instructorId], references: [id])
  sections    CourseSection[]
}

model CourseSection {
  id        String    @id @default(cuid())
  userId    String
  courseId  String
  title     String
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  course    Course   @relation(fields: [courseId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  videos    CourseVideo[]
}

model CourseVideo {
  id        String   @id @default(cuid())
  userId    String
  sectionId String
  title     String
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  section   CourseSection @relation(fields: [sectionId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}

model Exclusive {
  id          String     @id @default(cuid())
  classId     String
  instructorId String
  title       String
  description String
  thumbnailUrl String
  createdAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  class           Class      @relation(fields: [classId], references: [id])
  instructor  User       @relation(fields: [instructorId], references: [id])
  sections    ExclusiveSection[]
}

model ExclusiveSection {
  id              String    @id @default(cuid())
  userId     String
  courseId  String
  title         String
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  course    Exclusive   @relation(fields: [courseId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  videos    ExclusiveVideo[]
}

model ExclusiveVideo {
  id             String   @id @default(cuid())
  userId    String
  sectionId String
  title         String
  url           String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  section   ExclusiveSection @relation(fields: [sectionId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}


model Bootcamp {
  id          String   @id @default(cuid())
  name        String
  purpose     String
  country     String
  language    String
  rules       String
  description String
  icon        String
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  creator     User     @relation(fields: [creatorId], references: [id])
  classes     BootcampClass[]
  bootcampVideoCall BootcampVideoCall[]
  
}

model BootcampVideoCall {
  id         String     @id @default(cuid())
  bootCampId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants BootcampVideoCallParticipant[]

  class      Bootcamp      @relation(fields: [bootCampId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampVideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      BootcampVideoCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model BootcampClass {
  id          String          @id @default(cuid())
  name        String
  purpose     String
  rules       String
  description String
  icon        String
  bootcampId  String          // Add this to associate with Bootcamp
  level       ClassLevel      // Add this to differentiate Beginner, Intermediate, Advanced
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   String          
  creator     User            @relation(fields: [createdBy], references: [id])
  bootcamp    Bootcamp        @relation(fields: [bootcampId], references: [id])  
  instructors BootcampInstructor[]
  students    BootcampStudent[]
  classMediaUploads BootcampClassMediaUpload[]
  ClassTextPosts   BootcampClassTextPost[]
  chats       BootcampClassChat[]
  voiceCalls  BootcampClassVoiceCall[]
  videoCalls  BootcampClassVideoCall[]
  lectures    BootcampLecture[]
  course      BootcampCourse[]

}

model BootcampInstructor {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class     BootcampClass    @relation(fields: [classId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
}

model BootcampStudent {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  isBlocked Boolean  @default(false)

  class     BootcampClass    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, classId])
}

model BootcampClassMediaUpload {
  id           String   @id @default(cuid())
  classId      String
  userId       String
  type         BootcampClassMediaType
  contentUrl   String
  thumbnailUrl String?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  class        BootcampClass    @relation(fields: [classId], references: [id],onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampClassTextPost {
  id         String   @id @default(cuid())
  classId    String
  userId     String
  content    String
  imageUrls  String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      BootcampClass    @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampClassChat {
  id         String   @id @default(cuid())
  classId    String
  userId     String
  content    String
  type       BootcampClassChatMessageType
  fileUrl    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      BootcampClass    @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BootcampClassVoiceCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants BootcampClassVoiceCallParticipant[]

  class      BootcampClass      @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampClassVoiceCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      BootcampClassVoiceCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model BootcampClassVideoCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants BootcampClassVideoCallParticipant[]

  class      BootcampClass      @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampClassVideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      BootcampClassVideoCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model BootcampLecture {
  id          String      @id @default(cuid())
  classId     String
  creatorId   String
  title       String
  type        String
  participantLimit Int
  startDate   DateTime
  startTime   DateTime
  description String
  link        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  class       BootcampClass       @relation(fields: [classId], references: [id],onDelete: Cascade)
  creator           User              @relation(fields: [creatorId], references: [id],onDelete: Cascade)
  participants BootcampLectureParticipant[]
  videoCalls  BootcampLectureVideoCall[]
  voiceCalls  BootcampLectureVoiceCall[]
  chats       BootcampLectureChat[]
}

model BootcampLectureParticipant {
  id          String   @id @default(cuid())
  lectureId   String
  userId      String
  joinedAt    DateTime @default(now())

  lecture     BootcampLecture  @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([lectureId, userId])
}

model BootcampLectureVideoCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  lecture    BootcampLecture   @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampLectureVoiceCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  lecture    BootcampLecture   @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampLectureChat {
  id         String      @id @default(cuid())
  lectureId  String
  userId     String
  content    String
  type       BootcampLectureChatMessageType
  fileUrl    String?     
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  lecture    BootcampLecture     @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model BootcampCourse {
  id          String     @id @default(cuid())
  classId     String
  instructorId String
  title       String
  description String
  thumbnailUrl String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  class       BootcampClass     @relation(fields: [classId], references: [id],onDelete: Cascade)
  instructor  User       @relation(fields: [instructorId], references: [id],onDelete: Cascade)
  sections    BootcampCourseSection[]
}

model BootcampCourseSection {
  id        String    @id @default(cuid())
  userId    String
  courseId  String
  title     String
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  course    BootcampCourse   @relation(fields: [courseId], references: [id],onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id],onDelete: Cascade)
  videos    BootcampCourseVideo[]
}

model BootcampCourseVideo {
  id        String   @id @default(cuid())
  userId    String
  sectionId String
  title     String
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  section   BootcampCourseSection @relation(fields: [sectionId], references: [id],onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id],onDelete: Cascade)
}

enum ClassLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Academy {
  id          String   @id @default(cuid())
  name        String
  purpose     String
  country     String
  language    String
  rules       String
  description String
  icon        String
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  creator     User     @relation(fields: [creatorId], references: [id])
  classes     AcademyClass[]
  academyVideoCall AcademyVideoCall[]
}

model AcademyVideoCall {
  id         String     @id @default(cuid())
  academyId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants AcademyVideoCallParticipant[]

  class      Academy      @relation(fields: [academyId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyVideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      AcademyVideoCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model AcademyClass {
  id          String          @id @default(cuid())
  name        String
  purpose     String
  rules       String
  description String
  icon        String
  bootcampId  String          // Add this to associate with Bootcamp
  level       AcademyClassLevel      // Add this to differentiate Beginner, Intermediate, Advanced
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   String          
  creator     User            @relation(fields: [createdBy], references: [id])
  bootcamp    Academy        @relation(fields: [bootcampId], references: [id])  
  instructors AcademyInstructor[]
  students    AcademyStudent[]
  classMediaUploads AcademyClassMediaUpload[]
  ClassTextPosts   AcademyClassTextPost[]
  chats       AcademyClassChat[]
  voiceCalls  AcademyClassVoiceCall[]
  videoCalls  AcademyClassVideoCall[]
  lectures    AcademyLecture[]
  course      AcademyCourse[]

}

model AcademyInstructor {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class     AcademyClass    @relation(fields: [classId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
}

model AcademyStudent {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  isBlocked Boolean  @default(false)

  class     AcademyClass    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, classId])
}

model AcademyClassMediaUpload {
  id           String   @id @default(cuid())
  classId      String
  userId       String
  type         AcademyClassMediaType
  contentUrl   String
  thumbnailUrl String?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  class        AcademyClass    @relation(fields: [classId], references: [id],onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyClassTextPost {
  id         String   @id @default(cuid())
  classId    String
  userId     String
  content    String
  imageUrls  String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      AcademyClass    @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyClassChat {
  id         String   @id @default(cuid())
  classId    String
  userId     String
  content    String
  type       AcademyClassChatMessageType
  fileUrl    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      AcademyClass    @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AcademyClassVoiceCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants AcademyClassVoiceCallParticipant[]

  class      AcademyClass      @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyClassVoiceCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      AcademyClassVoiceCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model AcademyClassVideoCall {
  id         String     @id @default(cuid())
  classId    String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  participants AcademyClassVideoCallParticipant[]

  class      AcademyClass      @relation(fields: [classId], references: [id],onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyClassVideoCallParticipant {
  id        String   @id @default(cuid())
  callId    String
  userId    String

  call      AcademyClassVideoCall @relation(fields: [callId], references: [id],onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([callId, userId])
}

model AcademyLecture {
  id          String      @id @default(cuid())
  classId     String
  creatorId   String
  title       String
  type        String
  participantLimit Int
  startDate   DateTime
  startTime   DateTime
  description String
  link        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  class       AcademyClass       @relation(fields: [classId], references: [id],onDelete: Cascade)
  creator           User              @relation(fields: [creatorId], references: [id],onDelete: Cascade)
  participants AcademyLectureParticipant[]
  videoCalls  AcademyLectureVideoCall[]
  voiceCalls  AcademyLectureVoiceCall[]
  chats       AcademyLectureChat[]
}

model AcademyLectureParticipant {
  id          String   @id @default(cuid())
  lectureId   String
  userId      String
  joinedAt    DateTime @default(now())

  lecture     AcademyLecture  @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([lectureId, userId])
}

model AcademyLectureVideoCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  lecture    AcademyLecture   @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyLectureVoiceCall {
  id         String    @id @default(cuid())
  lectureId  String
  userId     String
  startedAt  DateTime
  endedAt    DateTime?
  link       String

  lecture    AcademyLecture   @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyLectureChat {
  id         String      @id @default(cuid())
  lectureId  String
  userId     String
  content    String
  type       AcademyLectureChatMessageType
  fileUrl    String?     
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  lecture    AcademyLecture     @relation(fields: [lectureId], references: [id],onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model AcademyCourse {
  id          String     @id @default(cuid())
  classId     String
  instructorId String
  title       String
  description String
  thumbnailUrl String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  class       AcademyClass     @relation(fields: [classId], references: [id],onDelete: Cascade)
  instructor  User       @relation(fields: [instructorId], references: [id],onDelete: Cascade)
  sections    AcademyCourseSection[]
}

model AcademyCourseSection {
  id        String    @id @default(cuid())
  userId    String
  courseId  String
  title     String
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  course    AcademyCourse   @relation(fields: [courseId], references: [id],onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id],onDelete: Cascade)
  videos    AcademyCourseVideo[]
}

model AcademyCourseVideo {
  id        String   @id @default(cuid())
  userId    String
  sectionId String
  title     String
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  section   AcademyCourseSection @relation(fields: [sectionId], references: [id],onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id],onDelete: Cascade)
}

enum AcademyClassLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}



model Comment {
  id        String      @id @default(cuid())
  userId    String
  productId String
  content   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Profile {
  id        String         @id @default(cuid())
  userId    String        @unique
  photoUrl  String
  bannerUrl String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  followers Follower[]
  following Following[]
  User      User        @relation(fields: [userId], references: [id])
}

model Contact {
  id        String      @id @default(cuid())
  name      String
  email     String
  reason    String
  statement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        String    @id @default(cuid())
  name      String
  reason    String
  statement String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String       @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User      @relation(fields: [userId], references: [id])
}

model Dislike {
  id        String      @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User      @relation(fields: [userId], references: [id])
}

model Follower {
  id               String      @id @default(cuid())
  followerId       String
  followingId      String
  isBlocked        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             User     @relation(fields: [followerId], references: [id])
  FollowingProfile Profile  @relation(fields: [followingId], references: [userId])
}

model Following {
  id               String      @id @default(cuid())
  followerId       String
  followingId      String
  isBlocked        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             User     @relation(fields: [followerId], references: [id])
  FollowingProfile Profile  @relation(fields: [followingId], references: [userId])
}

model FriendRequest {
  id           String              @id @default(cuid())
  senderId     String
  receiverId   String
  status       FriendshipStatus @default(PENDING)
  isBlocked    Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  ReceiverUser User             @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  SenderUser   User             @relation("SentFriendRequests", fields: [senderId], references: [id])
}



model Admin {
  id          String             @id @default(cuid())
  userId      String              @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isAdmin     Boolean           @default(false)
  User        User              @relation(fields: [userId], references: [id])
  AdminAction AdminAction[]
  Employees   AdminToEmployee[]
}

model AdminRegistration {
  id        String      @id @default(cuid())
  fullName  String
  email     String   @unique
  country   String
  state     String
  area      String
  address   String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id             String               @id @default(cuid())
  userId         String              @unique
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  access         Json
  isEmployee     Boolean           @default(false)
  AdminToEmloyee AdminToEmployee[]
  User           User              @relation(fields: [userId], references: [id])
  EmployeeAction EmployeeAction[]
}

model EmployeeRegistration {
  id        String      @id @default(cuid())
  fullName  String
  email     String   @unique
  country   String
  state     String
  area      String
  address   String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminToEmployee {
  id         String     @id @default(cuid())
  adminId    String
  employeeId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Admin      Admin    @relation(fields: [adminId], references: [id])
  Employee   Employee @relation(fields: [employeeId], references: [id])
}

model AdminAction {
  id        String      @id @default(cuid())
  adminId   String
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin    @relation(fields: [adminId], references: [id])
}

model EmployeeAction {
  id         String      @id @default(cuid())
  employeeId String
  action     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])
}

enum GroupMediaType {
  SHORT_VIDEO
  NORMAL_VIDEO
  IMAGE
  AUDIO
  DOCUMENT
}

enum ClassMediaType {
  SHORT_VIDEO
  NORMAL_VIDEO
  IMAGE
  AUDIO
  DOCUMENT
}

enum BootcampClassMediaType {
  SHORT_VIDEO
  NORMAL_VIDEO
  IMAGE
  AUDIO
  DOCUMENT
}

enum AcademyClassMediaType {
  SHORT_VIDEO
  NORMAL_VIDEO
  IMAGE
  AUDIO
  DOCUMENT
}

enum ChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum GroupChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum ProgramChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum LectureChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum BootcampLectureChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}


enum AcademyLectureChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum ClassChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum BootcampClassChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum AcademyClassChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}


enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum UserRole {
  ADMIN
  EMPLOYE
  USER
}


